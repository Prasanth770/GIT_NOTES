GIT NOTES


→Git (Global Information Tracker)
Git is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency.


→GIT VS GITHUB :
Git is a version control system that lets you manage and keep track of your source code history. GitHub is a cloud-based hosting service that lets you manage Git repositories. If you have open-source projects that use Git, then GitHub is designed to help you better manage them
.
→How GIT Works?
Git allows users to track code changes and manage their project using simple commands. The heart of Git is a repository used to contain a project. A repository can be stored locally or on a website, such as GitHub. Git allows users to store several different repositories and track each one independently.


→Features of Git
Scalbility,open -source,speed,Security


—------------------------------>>>>>GIT COMMANDS<<<<< —-----------------------------------


→Git add-
Moves changes from the working directory to the staging area. This gives you the opportunity to prepare a snapshot before committing it to the official history.


→Git branch-
This command is your general-purpose branch administration tool. It lets you create isolated development environments within a single repository.


→Git checkout-
In addition to checking out old commits and old file revisions, git checkout is also the means to navigate existing branches. Combined with the basic Git commands, it’s a way to work on a particular line of development.’


→git clone
Creates a copy of an existing Git repository. Cloning is the most common way for developers to obtain a working copy of a central repository.
→git commit
Takes the staged snapshot and commits it to the project history. Combined with git add, this defines the basic workflow for all Git users.
→git commit --amend
Passing the --amend flag to git commit lets you amend the most recent commit. This is very useful when you forget to stage a file or omit important information from the commit message.
→git config
A convenient way to set configuration options for your Git installation. You’ll typically only need to use this immediately after installing Git on a new development machine.
→git fetch
Fetching downloads a branch from another repository, along with all of its associated commits and files. But, it doesn't try to integrate anything into your local repository. This gives you a chance to inspect changes before merging them with your project.
→git init
Initializes a new Git repository. If you want to place a project under revision control, this is the first command you need to learn.
→git log
Lets you explore the previous revisions of a project. It provides several formatting options for displaying committed snapshots.
→git merge
A powerful way to integrate changes from divergent branches. After forking the project history with git branch, git merge lets you put it back together again.
→git pull
Pulling is the automated version of git fetch. It downloads a branch from a remote repository, then immediately merges it into the current branch. This is the Git equivalent of svn update.


→git push
Pushing is the opposite of fetching (with a few caveats). It lets you move a local branch to another repository, which serves as a convenient way to publish contributions. This is like svn commit, but it sends a series of commits instead of a single changeset.
→git rebase
Rebasing lets you move branches around, which helps you avoid unnecessary merge commits. The resulting linear history is often much easier to understand and explore.
→git reset
Undoes changes to files in the working directory. Resetting lets you clean up or completely remove changes that have not been pushed to a public repository.


→git status
Displays the state of the working directory and the staged snapshot. You’ll want to run this in conjunction with git add and git commit to see exactly what’s being included in the next snapshot.
→Order of git commands 
* git init.
* git add.
* git commit.
* git status.
* git remote.
* git push.
* git clone.
* git branch.